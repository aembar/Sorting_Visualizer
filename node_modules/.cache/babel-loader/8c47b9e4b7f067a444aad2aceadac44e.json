{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length === 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, middleIdx));\n  const secondHalf = mergeSort(array.slice(middleIdx));\n  const sortedArray = [];\n  let i = 0;\n  j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["/Users/adithya/Documents/SortingVisualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","length","middleIdx","Math","floor","firstHalf","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAuB,OAAOD,KAAP;AACvB,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAc,CAAzB,CAAlB;AACA,QAAMI,SAAS,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAcJ,SAAd,CAAD,CAA3B;AACA,QAAMK,UAAU,GAAIR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAYJ,SAAZ,CAAD,CAA7B;AACA,QAAMM,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAG,CAAR;AACEC,EAAAA,CAAC,GAAE,CAAH;;AACA,SAAMD,CAAC,GAAGJ,SAAS,CAACJ,MAAd,IAAwBS,CAAC,GAAGH,UAAU,CAACN,MAA7C,EAAoD;AAChD,QAAGI,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA5B,EAAgC;AAC5BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAEM;AACFD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AACH,SAAOD,CAAC,GAAGJ,SAAS,CAACJ,MAArB,EAA6BO,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;;AAC7B,SAAOC,CAAC,GAAGH,UAAU,CAACN,MAAtB,EAA8BO,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AAC7B,SAAOF,WAAP;AACJ,CAlBM","sourcesContent":["export const mergeSort = array => {\n    if(array.length === 1) return array;\n    const middleIdx = Math.floor(array.length /2);\n    const firstHalf = mergeSort(array.slice(0,middleIdx));\n    const secondHalf  = mergeSort(array.slice(middleIdx));\n    const sortedArray = [];\n    let i = 0;\n      j =0;\n      while(i < firstHalf.length && j < secondHalf.length){\n          if(firstHalf[i] < secondHalf[j]){\n              sortedArray.push(firstHalf[i++]);\n          }else {\n              sortedArray.push(secondHalf[j++]);\n          }\n      }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondHalf.length) sortedArray.push(secondHalf[j++]); \n     return sortedArray;\n};"]},"metadata":{},"sourceType":"module"}