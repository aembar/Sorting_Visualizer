{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adithya/Documents/Sorting_Visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\nimport './SortingVisualizer.css';\nimport styled, { css } from 'styled-components';\nconst ANIMATION_SPEED_MS = 3;\nconst NUMBER_OF_ARRAY_BARS = 310;\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animatingArray = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animatingArray.length; i++) {\n      const colorChange = i % 4 <= 1;\n\n      if (colorChange) {\n        const [barOneIdx, barTwoIdx] = animatingArray[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? onCompareColor : initialColor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animatingArray[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * speed);\n      }\n    }\n  }\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.resetArray(),\n        style: {\n          float: 'top'\n        },\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.mergeSort(),\n        style: {\n          float: 'top'\n        },\n        children: \" Merge Sort \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.quickSort(),\n        style: {\n          float: 'top'\n        },\n        children: \" Quick Sort \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.heapSort(),\n        style: {\n          float: 'top'\n        },\n        children: \" Heap Sort \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.bubbleSort(),\n        style: {\n          float: 'top'\n        },\n        children: \" Bubble Sort \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  align-items: top;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n_c = Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/adithya/Documents/Sorting_Visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","styled","css","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","animatingArray","colorChange","onCompareColor","initialColor","speed","heapSort","bubbleSort","render","float","map","value","idx","min","max","Math","floor","random","Button","button"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\n\n\nimport './SortingVisualizer.css';\nimport styled, { css } from 'styled-components';\n\nconst ANIMATION_SPEED_MS = 3;\n\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5,730));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n    quickSort() {\n        const animatingArray = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animatingArray.length; i++) {\n          const colorChange = i % 4 <= 1;\n          if (colorChange) {\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * speed);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animatingArray[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * speed);\n          }\n        }\n    }\n\n    heapSort() {}\n\n    bubbleSort() {}\n\n    render(){\n        const {array} = this.state;\n        return (\n            <>\n            <Button onClick={() => this.resetArray()} style={{float: 'top'}}>Generate New Array</Button>\n            <Button onClick={() => this.mergeSort()} style={{float: 'top'}}> Merge Sort </Button>\n            <Button onClick={() => this.quickSort()} style={{float: 'top'}}> Quick Sort </Button>\n            <Button onClick={() => this.heapSort()} style={{float: 'top'}}> Heap Sort </Button>\n            <Button onClick={() => this.bubbleSort()} style={{float: 'top'}}> Bubble Sort </Button>\n\n            <div className=\"array-container\">\n              {array.map((value, idx) =>  (\n                <div \n                className=\"array-bar\" \n                key={idx}\n                style={{height: `${value}px`}}></div>\n              ))}\n            </div>\n            </>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  align-items: top;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n"]},"metadata":{},"sourceType":"module"}