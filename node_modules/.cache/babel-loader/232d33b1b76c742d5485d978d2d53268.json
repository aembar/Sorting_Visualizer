{"ast":null,"code":"function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/adithya/Documents/SortingVisualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }"]},"metadata":{},"sourceType":"module"}