{"ast":null,"code":"//Always selecting the first element as pivot\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  let start = 0;\n  let end = array.length - 1;\n  quickSortFirst(array, start, end, animations);\n  return animations;\n}\n\nfunction quickSortFirst(array, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let pivotIdx = partition(array, start, end, animations);\n  quickSortFirst(array, start, pivotIdx - 1, animations);\n  quickSortFirst(array, pivotIdx + 1, end, animations);\n}\n\nfunction partition(array, start, end, animations) {\n  let pivotValue = array[start];\n  let lower = start + 1;\n  let run = true;\n\n  while (run) {\n    while (array[lower] <= pivotValue && lower <= end) {\n      animations.push([start, lower]);\n      animations.push([start, lower]);\n      animations.push([0, array[0]]);\n      animations.push([0, array[0]]);\n      lower += 1;\n    }\n\n    while (array[end] >= pivotValue && lower <= end) {\n      animations.push([start, end]); // animations.push([start, end]);\n\n      animations.push([0, array[0]]);\n      animations.push([0, array[0]]);\n      end -= 1;\n    }\n\n    if (end < lower) {\n      run = false;\n    } else {\n      animations.push([lower, end]);\n      animations.push([lower, end]);\n      animations.push([lower, array[end]]);\n      animations.push([end, array[lower]]);\n      let temp = array[lower];\n      array[lower] = array[end];\n      array[end] = temp;\n    }\n  }\n\n  animations.push([start, end]);\n  animations.push([start, end]);\n  animations.push([start, array[end]]);\n  animations.push([end, pivotValue]);\n  let temp = array[end];\n  array[end] = pivotValue;\n  array[start] = temp;\n  return end;\n}","map":{"version":3,"sources":["/Users/adithya/Documents/Sorting_Visualizer/src/sortingAlgorithms/quickSort.js"],"names":["getQuickSortAnimations","array","animations","start","end","length","quickSortFirst","pivotIdx","partition","pivotValue","lower","run","push","temp"],"mappings":"AAAA;AACA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGH,KAAK,CAACI,MAAN,GAAe,CAAzB;AACAC,EAAAA,cAAc,CAACL,KAAD,EAAQE,KAAR,EAAeC,GAAf,EAAoBF,UAApB,CAAd;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,cAAT,CAAwBL,KAAxB,EAA+BE,KAA/B,EAAsCC,GAAtC,EAA2CF,UAA3C,EAAuD;AACrD,MAAIC,KAAK,IAAIC,GAAb,EAAkB;AAChB;AACD;;AACD,MAAIG,QAAQ,GAAGC,SAAS,CAACP,KAAD,EAAQE,KAAR,EAAeC,GAAf,EAAoBF,UAApB,CAAxB;AACAI,EAAAA,cAAc,CAACL,KAAD,EAAQE,KAAR,EAAeI,QAAQ,GAAG,CAA1B,EAA6BL,UAA7B,CAAd;AACAI,EAAAA,cAAc,CAACL,KAAD,EAAQM,QAAQ,GAAG,CAAnB,EAAsBH,GAAtB,EAA2BF,UAA3B,CAAd;AACD;;AAED,SAASM,SAAT,CAAmBP,KAAnB,EAA0BE,KAA1B,EAAiCC,GAAjC,EAAsCF,UAAtC,EAAkD;AAChD,MAAIO,UAAU,GAAGR,KAAK,CAACE,KAAD,CAAtB;AACA,MAAIO,KAAK,GAAGP,KAAK,GAAG,CAApB;AACA,MAAIQ,GAAG,GAAG,IAAV;;AACA,SAAOA,GAAP,EAAY;AACV,WAAOV,KAAK,CAACS,KAAD,CAAL,IAAgBD,UAAhB,IAA8BC,KAAK,IAAIN,GAA9C,EAAmD;AACjDF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQO,KAAR,CAAhB;AACAR,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQO,KAAR,CAAhB;AACAR,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIX,KAAK,CAAC,CAAD,CAAT,CAAhB;AACAC,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIX,KAAK,CAAC,CAAD,CAAT,CAAhB;AACAS,MAAAA,KAAK,IAAI,CAAT;AACD;;AACD,WAAOT,KAAK,CAACG,GAAD,CAAL,IAAcK,UAAd,IAA4BC,KAAK,IAAIN,GAA5C,EAAiD;AAC/CF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQC,GAAR,CAAhB,EAD+C,CAEhD;;AACCF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIX,KAAK,CAAC,CAAD,CAAT,CAAhB;AACAC,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,CAAD,EAAIX,KAAK,CAAC,CAAD,CAAT,CAAhB;AACAG,MAAAA,GAAG,IAAI,CAAP;AACD;;AACD,QAAIA,GAAG,GAAGM,KAAV,EAAiB;AACfC,MAAAA,GAAG,GAAG,KAAN;AACD,KAFD,MAEO;AACLT,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACF,KAAD,EAAQN,GAAR,CAAhB;AACAF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACF,KAAD,EAAQN,GAAR,CAAhB;AACAF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACF,KAAD,EAAQT,KAAK,CAACG,GAAD,CAAb,CAAhB;AACAF,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACR,GAAD,EAAMH,KAAK,CAACS,KAAD,CAAX,CAAhB;AACA,UAAIG,IAAI,GAAGZ,KAAK,CAACS,KAAD,CAAhB;AACAT,MAAAA,KAAK,CAACS,KAAD,CAAL,GAAeT,KAAK,CAACG,GAAD,CAApB;AACAH,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaS,IAAb;AACD;AACF;;AACDX,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQC,GAAR,CAAhB;AACAF,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQC,GAAR,CAAhB;AACAF,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACT,KAAD,EAAQF,KAAK,CAACG,GAAD,CAAb,CAAhB;AACAF,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACR,GAAD,EAAMK,UAAN,CAAhB;AACA,MAAII,IAAI,GAAGZ,KAAK,CAACG,GAAD,CAAhB;AACAH,EAAAA,KAAK,CAACG,GAAD,CAAL,GAAaK,UAAb;AACAR,EAAAA,KAAK,CAACE,KAAD,CAAL,GAAeU,IAAf;AACA,SAAOT,GAAP;AACD","sourcesContent":["//Always selecting the first element as pivot\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    let start = 0;\n    let end = array.length - 1;\n    quickSortFirst(array, start, end, animations);\n    return animations;\n  }\n  \n  function quickSortFirst(array, start, end, animations) {\n    if (start >= end) {\n      return;\n    }\n    let pivotIdx = partition(array, start, end, animations);\n    quickSortFirst(array, start, pivotIdx - 1, animations);\n    quickSortFirst(array, pivotIdx + 1, end, animations);\n  }\n  \n  function partition(array, start, end, animations) {\n    let pivotValue = array[start];\n    let lower = start + 1;\n    let run = true;\n    while (run) {\n      while (array[lower] <= pivotValue && lower <= end) {\n        animations.push([start, lower]);\n        animations.push([start, lower]);\n        animations.push([0, array[0]]);\n        animations.push([0, array[0]]);\n        lower += 1;\n      }\n      while (array[end] >= pivotValue && lower <= end) {\n        animations.push([start, end]);\n       // animations.push([start, end]);\n        animations.push([0, array[0]]);\n        animations.push([0, array[0]]);\n        end -= 1;\n      }\n      if (end < lower) {\n        run = false;\n      } else {\n        animations.push([lower, end]);\n        animations.push([lower, end]);\n        animations.push([lower, array[end]]);\n        animations.push([end, array[lower]]);\n        let temp = array[lower];\n        array[lower] = array[end];\n        array[end] = temp;\n      }\n    }\n    animations.push([start, end]);\n    animations.push([start, end]);\n    animations.push([start, array[end]]);\n    animations.push([end, pivotValue]);\n    let temp = array[end];\n    array[end] = pivotValue;\n    array[start] = temp;\n    return end;\n  }"]},"metadata":{},"sourceType":"module"}