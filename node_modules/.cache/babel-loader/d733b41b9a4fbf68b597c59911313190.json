{"ast":null,"code":"//Loop through the array, shifting the largest element to the end each time\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  bubbleSort(array, animations);\n  return animations;\n}\n\nfunction bubbleSort(array, animations) {\n  let end = array.length - 1;\n\n  while (end >= 1) {\n    for (let j = 0; j < end; j++) {\n      if (array[j] > array[j + 1]) {\n        animations.push([j, j + 1]);\n        animations.push([j, j + 1]);\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n\n    end--;\n  }\n}","map":{"version":3,"sources":["/Users/adithya/Documents/Sorting_Visualizer/src/sortingAlgorithms/bubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","bubbleSort","end","length","j","push","temp"],"mappings":"AAAA;AACA,OAAO,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,UAAU,CAACF,KAAD,EAAQC,UAAR,CAAV;AACA,SAAOA,UAAP;AACD;;AAED,SAASC,UAAT,CAAoBF,KAApB,EAA2BC,UAA3B,EAAuC;AACrC,MAAIE,GAAG,GAAGH,KAAK,CAACI,MAAN,GAAe,CAAzB;;AACA,SAAOD,GAAG,IAAI,CAAd,EAAiB;AACf,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,UAAIL,KAAK,CAACK,CAAD,CAAL,GAAWL,KAAK,CAACK,CAAC,GAAG,CAAL,CAApB,EAA6B;AAC3BJ,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACAJ,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACAJ,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAACD,CAAD,EAAIL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAT,CAAhB;AACAJ,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAACD,CAAC,GAAG,CAAL,EAAQL,KAAK,CAACK,CAAD,CAAb,CAAhB;AACA,YAAIE,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAhB;AACAL,QAAAA,KAAK,CAACK,CAAD,CAAL,GAAWL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAhB;AACAL,QAAAA,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeE,IAAf;AACD;AACF;;AACDJ,IAAAA,GAAG;AACJ;AACF","sourcesContent":["//Loop through the array, shifting the largest element to the end each time\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    bubbleSort(array, animations);\n    return animations;\n  }\n  \n  function bubbleSort(array, animations) {\n    let end = array.length - 1;\n    while (end >= 1) {\n      for (let j = 0; j < end; j++) {\n        if (array[j] > array[j + 1]) {\n          animations.push([j, j + 1]);\n          animations.push([j, j + 1]);\n          animations.push([j, array[j + 1]]);\n          animations.push([j + 1, array[j]]);\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n      end--;\n    }\n  }"]},"metadata":{},"sourceType":"module"}