{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  let start = 0;\n  let end = array.length - 1;\n  quickSortLast(array, start, end, animations);\n  return animations;\n}\n\nfunction quickSortLast(array, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let pivotIdx = partition(array, start, end, animations);\n  quickSortLast(array, start, pivotIdx - 1, animations);\n  quickSortLast(array, pivotIdx + 1, end, animations);\n}\n\nfunction partition(array, start, end, animations) {\n  let pivotValue = array[end];\n  let currentSmaller = start - 1;\n\n  while (start < end) {\n    animations.push([start, end]);\n    animations.push([start, end]);\n\n    if (array[start] <= pivotValue) {\n      currentSmaller += 1;\n      animations.push([start, array[currentSmaller]]);\n      animations.push([currentSmaller, array[start]]);\n      let tempx = array[currentSmaller];\n      array[currentSmaller] = array[start];\n      array[start] = tempx;\n    } else {\n      animations.push([0, array[0]]);\n      animations.push([0, array[0]]);\n    }\n\n    start += 1;\n  }\n\n  animations.push([end, currentSmaller + 1]);\n  animations.push([end, currentSmaller + 1]);\n  animations.push([end, array[currentSmaller + 1]]);\n  animations.push([currentSmaller + 1, array[end]]);\n  let temp = array[currentSmaller + 1];\n  array[currentSmaller + 1] = pivotValue;\n  array[end] = temp;\n  return currentSmaller + 1;\n}","map":{"version":3,"sources":["/Users/adithya/Documents/Sorting_Visualizer/src/sortingAlgorithms/quickSort.js"],"names":["getQuickSortAnimations","array","animations","start","end","length","quickSortLast","pivotIdx","partition","pivotValue","currentSmaller","push","tempx","temp"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGH,KAAK,CAACI,MAAN,GAAe,CAAzB;AACAC,EAAAA,aAAa,CAACL,KAAD,EAAQE,KAAR,EAAeC,GAAf,EAAoBF,UAApB,CAAb;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,aAAT,CAAuBL,KAAvB,EAA8BE,KAA9B,EAAqCC,GAArC,EAA0CF,UAA1C,EAAsD;AACpD,MAAIC,KAAK,IAAIC,GAAb,EAAkB;AAChB;AACD;;AACD,MAAIG,QAAQ,GAAGC,SAAS,CAACP,KAAD,EAAQE,KAAR,EAAeC,GAAf,EAAoBF,UAApB,CAAxB;AACAI,EAAAA,aAAa,CAACL,KAAD,EAAQE,KAAR,EAAeI,QAAQ,GAAG,CAA1B,EAA6BL,UAA7B,CAAb;AACAI,EAAAA,aAAa,CAACL,KAAD,EAAQM,QAAQ,GAAG,CAAnB,EAAsBH,GAAtB,EAA2BF,UAA3B,CAAb;AACD;;AAED,SAASM,SAAT,CAAmBP,KAAnB,EAA0BE,KAA1B,EAAiCC,GAAjC,EAAsCF,UAAtC,EAAkD;AAChD,MAAIO,UAAU,GAAGR,KAAK,CAACG,GAAD,CAAtB;AACA,MAAIM,cAAc,GAAGP,KAAK,GAAG,CAA7B;;AACA,SAAOA,KAAK,GAAGC,GAAf,EAAoB;AAClBF,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACR,KAAD,EAAQC,GAAR,CAAhB;AACAF,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACR,KAAD,EAAQC,GAAR,CAAhB;;AACA,QAAIH,KAAK,CAACE,KAAD,CAAL,IAAgBM,UAApB,EAAgC;AAC9BC,MAAAA,cAAc,IAAI,CAAlB;AACAR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACR,KAAD,EAAQF,KAAK,CAACS,cAAD,CAAb,CAAhB;AACAR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACD,cAAD,EAAiBT,KAAK,CAACE,KAAD,CAAtB,CAAhB;AACA,UAAIS,KAAK,GAAGX,KAAK,CAACS,cAAD,CAAjB;AACAT,MAAAA,KAAK,CAACS,cAAD,CAAL,GAAwBT,KAAK,CAACE,KAAD,CAA7B;AACAF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeS,KAAf;AACD,KAPD,MAOO;AACLV,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,CAAD,EAAIV,KAAK,CAAC,CAAD,CAAT,CAAhB;AACAC,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,CAAD,EAAIV,KAAK,CAAC,CAAD,CAAT,CAAhB;AACD;;AACDE,IAAAA,KAAK,IAAI,CAAT;AACD;;AACDD,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACP,GAAD,EAAMM,cAAc,GAAG,CAAvB,CAAhB;AACAR,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACP,GAAD,EAAMM,cAAc,GAAG,CAAvB,CAAhB;AACAR,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACP,GAAD,EAAMH,KAAK,CAACS,cAAc,GAAG,CAAlB,CAAX,CAAhB;AACAR,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACD,cAAc,GAAG,CAAlB,EAAqBT,KAAK,CAACG,GAAD,CAA1B,CAAhB;AACA,MAAIS,IAAI,GAAGZ,KAAK,CAACS,cAAc,GAAG,CAAlB,CAAhB;AACAT,EAAAA,KAAK,CAACS,cAAc,GAAG,CAAlB,CAAL,GAA4BD,UAA5B;AACAR,EAAAA,KAAK,CAACG,GAAD,CAAL,GAAaS,IAAb;AACA,SAAOH,cAAc,GAAG,CAAxB;AACD","sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    let start = 0;\n    let end = array.length - 1;\n    quickSortLast(array, start, end, animations);\n    return animations;\n  }\n  \n  function quickSortLast(array, start, end, animations) {\n    if (start >= end) {\n      return;\n    }\n    let pivotIdx = partition(array, start, end, animations);\n    quickSortLast(array, start, pivotIdx - 1, animations);\n    quickSortLast(array, pivotIdx + 1, end, animations);\n  }\n  \n  function partition(array, start, end, animations) {\n    let pivotValue = array[end];\n    let currentSmaller = start - 1;\n    while (start < end) {\n      animations.push([start, end]);\n      animations.push([start, end]);\n      if (array[start] <= pivotValue) {\n        currentSmaller += 1;\n        animations.push([start, array[currentSmaller]]);\n        animations.push([currentSmaller, array[start]]);\n        let tempx = array[currentSmaller];\n        array[currentSmaller] = array[start];\n        array[start] = tempx;\n      } else {\n        animations.push([0, array[0]]);\n        animations.push([0, array[0]]);\n      }\n      start += 1;\n    }\n    animations.push([end, currentSmaller + 1]);\n    animations.push([end, currentSmaller + 1]);\n    animations.push([end, array[currentSmaller + 1]]);\n    animations.push([currentSmaller + 1, array[end]]);\n    let temp = array[currentSmaller + 1];\n    array[currentSmaller + 1] = pivotValue;\n    array[end] = temp;\n    return currentSmaller + 1;\n  }\n  "]},"metadata":{},"sourceType":"module"}