{"ast":null,"code":"/*export const mergeSort = (array,animations = []) => {\n    if(array.length === 1) return array;\n    const middleIdx = Math.floor(array.length /2);\n    const firstHalf = mergeSort(array.slice(0,middleIdx));\n    const secondHalf  = mergeSort(array.slice(middleIdx));\n    const sortedArray = [];\n    let i = 0;\n      j =0;\n      while(i < firstHalf.length && j < secondHalf.length){\n          if(firstHalf[i] < secondHalf[j]){\n              sortedArray.push(firstHalf[i++]);\n          }else {\n              sortedArray.push(secondHalf[j++]);\n          }\n      }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondHalf.length) sortedArray.push(secondHalf[j++]); \n     return sortedArray;\n};*/\nexport function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    const animation = {};\n    animation.comparison = [i, j];\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animation.swap = [k, i];\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animation.swap = [k, j];\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n\n    animations.push(animation);\n  }\n\n  while (i <= middleIdx) {\n    animations.push({\n      comparison: [i, i],\n      swap: [k, i]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push({\n      comparison: [j, j],\n      swap: [k, j]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/adithya/Documents/SortingVisualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","animation","comparison","swap","push"],"mappings":"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","sourcesContent":["\n/*export const mergeSort = (array,animations = []) => {\n    if(array.length === 1) return array;\n    const middleIdx = Math.floor(array.length /2);\n    const firstHalf = mergeSort(array.slice(0,middleIdx));\n    const secondHalf  = mergeSort(array.slice(middleIdx));\n    const sortedArray = [];\n    let i = 0;\n      j =0;\n      while(i < firstHalf.length && j < secondHalf.length){\n          if(firstHalf[i] < secondHalf[j]){\n              sortedArray.push(firstHalf[i++]);\n          }else {\n              sortedArray.push(secondHalf[j++]);\n          }\n      }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondHalf.length) sortedArray.push(secondHalf[j++]); \n     return sortedArray;\n};*/\n\nexport function mergeSort(array) {\n    const animations = [];\n    if( array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length -1, auxiliaryArray, animations);\n    return animations; \n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if( startIdx === endIdx) return; \n    const middleIdx = Math.floor((startIdx + endIdx) /2 );\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations); \n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations); \n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while(i <= middleIdx && j <= endIdx) {\n        const animation = {};\n        animation.comparison = [i, j];\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animation.swap = [k, i]; \n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        else {\n            animation.swap = [k, j]; \n            mainArray[k++] = auxiliaryArray[j++];\n        }\n        animations.push(animation);\n    }\n    while(i <= middleIdx) {\n        animations.push({\n            comparison: [i,i],\n            swap: [k,i],\n        });\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while( j <= endIdx) {\n        animations.push({\n            comparison: [j,j],\n            swap: [k,j],\n        });\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}